;(() => {
	var theMorseBase = {
		".-": "A",
		"-...": "B",
		"-.-.": "C",
		"-..": "D",
		".": "E",
		"..-.": "F",
		"--.": "G",
		"....": "H",
		"..": "I",
		".---": "J",
		"-.-": "K",
		".-..": "L",
		"--": "M",
		"-.": "N",
		"---": "O",
		".--.": "P",
		"--.-": "Q",
		".-.": "R",
		"...": "S",
		"-": "T",
		"..-": "U",
		"...-": "V",
		".--": "W",
		"-..-": "X",
		"-.--": "Y",
		"--..": "Z",
		"-----": "0",
		".----": "1",
		"..---": "2",
		"...--": "3",
		"....-": "4",
		".....": "5",
		"-....": "6",
		"--...": "7",
		"---..": "8",
		"----.": "9",
		"": " ",
	}

	var theMorseArrayBase = [
		null,
		" ",
		"E",
		"T",
		"I",
		"A",
		"N",
		"M",
		"S",
		"U",
		"R",
		"W",
		"D",
		"K",
		"G",
		"O",
		"H",
		"V",
		"F",
		null,
		"L",
		null,
		"P",
		"J",
		"B",
		"X",
		"C",
		"Y",
		"Z",
		"Q",
		null,
		null,
		"5",
		"4",
		null,
		"3",
		null,
		null,
		null,
		"2",
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		"1",
		"6",
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		"7",
		null,
		null,
		null,
		"8",
		null,
		"9",
		"0",
	]

	var doBinaryParse = theIn => {
		var theProgram = [...theIn.trim()]
		var theState = {
			".": theThing => theThing << 1,
			"-": theThing => (theThing << 1) | 1,
			" ": theThing => 1,
			other: () => {},
		}
		return theMorseArrayBase[
			theProgram.reduce((theRes, theCommand) => theState[theCommand](theRes), 1)
		]
	}

	console.log(doBinaryParse("  .... . -.--   -.. ..- -.. .   "))
})()
